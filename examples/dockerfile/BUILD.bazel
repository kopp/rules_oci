# native_binary(
#     name = "buildx",
#     src = select({
#         "@bazel_tools//src/conditions:linux_x86_64": "@buildx_linux_amd64//file",
#         "@bazel_tools//src/conditions:darwin_arm64": "@buildx_darwin_arm64//file",
#         "@bazel_tools//src/conditions:darwin_x86_64": "@buildx_darwin_amd64//file",
#     }),
#     out = "buildx",
# )

# # docker buildx create --name container --driver=docker-container
# run_binary(
#     name = "base",
#     srcs = ["Dockerfile"] + glob(["src/*"]),
#     args = [
#         "build",
#         "./examples/dockerfile",
#         "--builder",
#         BUILDER_NAME,
#         "--output=type=oci,tar=false,dest=$@",
#     ],
#     execution_requirements = {"local": "1"},
#     mnemonic = "BuildDocker",
#     out_dirs = ["base"],
#     target_compatible_with = TARGET_COMPATIBLE_WITH,
#     tool = ":buildx",
# )

# oci_image(
#     name = "image",
#     base = ":base",
# )

# assert_oci_config(
#     name = "assert_metadata",
#     cmd_eq = ["/app/say.py"],
#     entrypoint_eq = [],
#     image = ":image",
# )

# assert_oci_image_command(
#     name = "assert_jq_works",
#     args = [
#         "jq",
#         "--version",
#     ],
#     image = ":image",
#     exit_code_eq = 0,
#     output_eq = "jq-1.6\n",
# )

# assert_oci_image_command(
#     name = "assert_apt_lists_still_exist",
#     args = [
#         "file",
#         "/var/lib/apt/lists",
#     ],
#     image = ":image",
#     exit_code_eq = 0,
#     output_eq = "/var/lib/apt/lists: directory\n",
# )

# assert_oci_image_command(
#     name = "assert_cow_says_moo",
#     args = [
#         "python",
#         "/app/say.py",
#     ],
#     image = ":image",
#     exit_code_eq = 0,
#     output_eq = """\
#   ____
# | moo! |
#   ====
#     \\
#      \\
#        ^__^
#        (oo)\\_______
#        (__)\\       )\\/\\
#            ||----w |
#            ||     ||
# """,
# )
